(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-38"]
open Queue
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct type sut = int t
                                  let init () = create () end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: int Ortac_runtime.Gospelstdlib.sequence }
    let init =
      let () = () in
      {
        contents =
          (try Ortac_runtime.Gospelstdlib.Sequence.empty
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "queue.mli";
                            pos_lnum = 8;
                            pos_bol = 244;
                            pos_cnum = 269
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "queue.mli";
                            pos_lnum = 8;
                            pos_bol = 244;
                            pos_cnum = 283
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    module QCheck =
      struct
        include QCheck
        module Gen = struct include Gen
                            let int = small_signed_int end
      end
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 2
    type state = Model.t
    let init_state = Model.create 2 ()
    type cmd =
      | Create of unit 
      | Push of int 
      | Pop 
      | Peek 
      | Peek_opt 
      | Clear 
      | Is_empty 
      | Transfer 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Create () ->
          Format.asprintf "%s %a" "create" (Util.Pp.pp_unit true) ()
      | Push v ->
          Format.asprintf "%s %a <sut>" "push" (Util.Pp.pp_int true) v
      | Pop -> Format.asprintf "protect (fun () -> %s <sut>)" "pop"
      | Peek -> Format.asprintf "protect (fun () -> %s <sut>)" "peek"
      | Peek_opt -> Format.asprintf "%s <sut>" "peek_opt"
      | Clear -> Format.asprintf "%s <sut>" "clear"
      | Is_empty -> Format.asprintf "%s <sut>" "is_empty"
      | Transfer -> Format.asprintf "%s <sut> <sut>" "transfer"
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [(pure (fun () -> Create ())) <*> unit;
               (pure (fun v -> Push v)) <*> int;
               pure Pop;
               pure Peek;
               pure Peek_opt;
               pure Clear;
               pure Is_empty;
               pure Transfer])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Create () ->
          let t_1__005_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.empty
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 8;
                                    pos_bol = 244;
                                    pos_cnum = 269
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 8;
                                    pos_bol = 244;
                                    pos_cnum = 283
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 0) t_1__005_
      | Push v ->
          let t_2__006_ = Model.get state__003_ 0 in
          let t_2__007_ =
            let open ModelElt in
              {
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.Sequence.snoc
                       t_2__006_.contents v
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 13;
                                    pos_bol = 441;
                                    pos_cnum = 466
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 13;
                                    pos_bol = 441;
                                    pos_cnum = 498
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_2__007_
      | Pop ->
          let t_3__008_ = Model.get state__003_ 0 in
          let t_3__010_ =
            let open ModelElt in
              {
                contents =
                  (try
                     match Ortac_runtime.Gospelstdlib.Sequence.length
                             t_3__008_.contents
                     with
                     | __x__009_ when
                         (=) __x__009_
                           (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                         -> Ortac_runtime.Gospelstdlib.Sequence.empty
                     | _ ->
                         Ortac_runtime.Gospelstdlib.Sequence.tl
                           t_3__008_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 19;
                                    pos_bol = 732;
                                    pos_cnum = 757
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 21;
                                    pos_bol = 831;
                                    pos_cnum = 874
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_3__010_
      | Peek ->
          let t_4__011_ = Model.get state__003_ 0 in
          let t_4__012_ = t_4__011_ in
          Model.push (Model.drop_n state__003_ 1) t_4__012_
      | Peek_opt ->
          let t_5__013_ = Model.get state__003_ 0 in
          let t_5__014_ = t_5__013_ in
          Model.push (Model.drop_n state__003_ 1) t_5__014_
      | Clear ->
          let t_6__015_ = Model.get state__003_ 0 in
          let t_6__016_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.empty
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 39;
                                    pos_bol = 1621;
                                    pos_cnum = 1646
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 39;
                                    pos_bol = 1621;
                                    pos_cnum = 1660
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_6__016_
      | Is_empty ->
          let t_7__017_ = Model.get state__003_ 0 in
          let t_7__018_ = t_7__017_ in
          Model.push (Model.drop_n state__003_ 1) t_7__018_
      | Transfer ->
          let t1__019_ = Model.get state__003_ 0
          and t2__020_ = Model.get state__003_ 1 in
          let t1__022_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.empty
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 51;
                                    pos_bol = 2071;
                                    pos_cnum = 2097
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 51;
                                    pos_bol = 2071;
                                    pos_cnum = 2111
                                  }
                              })))
              }
          and t2__021_ =
            let open ModelElt in
              {
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.Sequence.append
                       t1__019_.contents t2__020_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 52;
                                    pos_bol = 2112;
                                    pos_cnum = 2138
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 52;
                                    pos_bol = 2112;
                                    pos_cnum = 2189
                                  }
                              })))
              } in
          Model.push (Model.push (Model.drop_n state__003_ 2) t2__021_)
            t1__022_
    let precond cmd__061_ state__062_ =
      match cmd__061_ with
      | Create () -> true
      | Push v -> let t_2__063_ = Model.get state__062_ 0 in true
      | Pop -> let t_3__064_ = Model.get state__062_ 0 in true
      | Peek -> let t_4__065_ = Model.get state__062_ 0 in true
      | Peek_opt -> let t_5__066_ = Model.get state__062_ 0 in true
      | Clear -> let t_6__067_ = Model.get state__062_ 0 in true
      | Is_empty -> let t_7__068_ = Model.get state__062_ 0 in true
      | Transfer ->
          let t1__069_ = Model.get state__062_ 0
          and t2__070_ = Model.get state__062_ 1 in true
    let postcond _ _ _ = true
    let run cmd__071_ sut__072_ =
      match cmd__071_ with
      | Create () ->
          Res
            (sut,
              (let res__073_ = create () in
               (SUT.push sut__072_ res__073_; res__073_)))
      | Push v ->
          Res
            (unit,
              (let t_2__074_ = SUT.pop sut__072_ in
               let res__075_ = push v t_2__074_ in
               (SUT.push sut__072_ t_2__074_; res__075_)))
      | Pop ->
          Res
            ((result int exn),
              (let t_3__076_ = SUT.pop sut__072_ in
               let res__077_ = protect (fun () -> pop t_3__076_) () in
               (SUT.push sut__072_ t_3__076_; res__077_)))
      | Peek ->
          Res
            ((result int exn),
              (let t_4__078_ = SUT.pop sut__072_ in
               let res__079_ = protect (fun () -> peek t_4__078_) () in
               (SUT.push sut__072_ t_4__078_; res__079_)))
      | Peek_opt ->
          Res
            ((option int),
              (let t_5__080_ = SUT.pop sut__072_ in
               let res__081_ = peek_opt t_5__080_ in
               (SUT.push sut__072_ t_5__080_; res__081_)))
      | Clear ->
          Res
            (unit,
              (let t_6__082_ = SUT.pop sut__072_ in
               let res__083_ = clear t_6__082_ in
               (SUT.push sut__072_ t_6__082_; res__083_)))
      | Is_empty ->
          Res
            (bool,
              (let t_7__084_ = SUT.pop sut__072_ in
               let res__085_ = is_empty t_7__084_ in
               (SUT.push sut__072_ t_7__084_; res__085_)))
      | Transfer ->
          Res
            (unit,
              (let t1__086_ = SUT.pop sut__072_ in
               let t2__087_ = SUT.pop sut__072_ in
               let res__088_ = transfer t1__086_ t2__087_ in
               (SUT.push sut__072_ t2__087_;
                SUT.push sut__072_ t1__086_;
                res__088_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__090_ state__091_ last__093_ res__092_ =
  let open Spec in
    let open STM in
      match (cmd__090_, res__092_) with
      | (Create (), Res ((SUT, _), t_1)) ->
          let lhs = if last__093_ then "r" else SUT.get_name state__091_ 0
          and shift = 1 in
          Format.asprintf "let %s = %s %a" lhs "create"
            (Util.Pp.pp_unit true) ()
      | (Push v, Res ((Unit, _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %a %s" lhs "push"
            (Util.Pp.pp_int true) v (SUT.get_name state__091_ (0 + shift))
      | (Pop, Res ((Result (Int, Exn), _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = protect (fun () -> %s %s)" lhs "pop"
            (SUT.get_name state__091_ (0 + shift))
      | (Peek, Res ((Result (Int, Exn), _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = protect (fun () -> %s %s)" lhs "peek"
            (SUT.get_name state__091_ (0 + shift))
      | (Peek_opt, Res ((Option (Int), _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "peek_opt"
            (SUT.get_name state__091_ (0 + shift))
      | (Clear, Res ((Unit, _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "clear"
            (SUT.get_name state__091_ (0 + shift))
      | (Is_empty, Res ((Bool, _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "is_empty"
            (SUT.get_name state__091_ (0 + shift))
      | (Transfer, Res ((Unit, _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %s" lhs "transfer"
            (SUT.get_name state__091_ (0 + shift))
            (SUT.get_name state__091_ (1 + shift))
      | _ -> assert false
let ortac_postcond cmd__023_ state__024_ res__025_ =
  let open Spec in
    let open STM in
      let new_state__026_ = lazy (next_state cmd__023_ state__024_) in
      match (cmd__023_, res__025_) with
      | (Create (), Res ((SUT, _), t_1)) -> None
      | (Push v, Res ((Unit, _), _)) -> None
      | (Pop, Res ((Result (Int, Exn), _), v_1)) ->
          (match v_1 with
           | Ok v_1 ->
               Ortac_runtime.append
                 (if
                    let t_old__030_ = Model.get state__024_ 0
                    and t_new__031_ =
                      lazy (Model.get (Lazy.force new_state__026_) 0) in
                    try
                      v_1 =
                        (Ortac_runtime.Gospelstdlib.Sequence.hd
                           t_old__030_.contents)
                    with
                    | e ->
                        raise
                          (Ortac_runtime.Partial_function
                             (e,
                               {
                                 Ortac_runtime.start =
                                   {
                                     pos_fname = "queue.mli";
                                     pos_lnum = 22;
                                     pos_bol = 875;
                                     pos_cnum = 887
                                   };
                                 Ortac_runtime.stop =
                                   {
                                     pos_fname = "queue.mli";
                                     pos_lnum = 22;
                                     pos_bol = 875;
                                     pos_cnum = 919
                                   }
                               }))
                  then None
                  else
                    Some
                      (Ortac_runtime.report "Queue" "create ()"
                         (Ortac_runtime.Protected_value
                            (Res
                               (int,
                                 (let t_old__028_ = Model.get state__024_ 0
                                  and t_new__029_ =
                                    lazy
                                      (Model.get (Lazy.force new_state__026_)
                                         0) in
                                  try
                                    Ortac_runtime.Gospelstdlib.Sequence.hd
                                      t_old__028_.contents
                                  with
                                  | e ->
                                      raise
                                        (Ortac_runtime.Partial_function
                                           (e,
                                             {
                                               Ortac_runtime.start =
                                                 {
                                                   pos_fname = "queue.mli";
                                                   pos_lnum = 22;
                                                   pos_bol = 875;
                                                   pos_cnum = 891
                                                 };
                                               Ortac_runtime.stop =
                                                 {
                                                   pos_fname = "queue.mli";
                                                   pos_lnum = 22;
                                                   pos_bol = 875;
                                                   pos_cnum = 919
                                                 }
                                             })))))) "pop"
                         [("v = Sequence.hd (old t.contents)",
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 22;
                                  pos_bol = 875;
                                  pos_cnum = 887
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 22;
                                  pos_bol = 875;
                                  pos_cnum = 919
                                }
                            })]))
                 (if
                    let t_old__032_ = Model.get state__024_ 0
                    and t_new__033_ =
                      lazy (Model.get (Lazy.force new_state__026_) 0) in
                    try
                      not
                        (t_old__032_.contents =
                           Ortac_runtime.Gospelstdlib.Sequence.empty)
                    with
                    | e ->
                        raise
                          (Ortac_runtime.Partial_function
                             (e,
                               {
                                 Ortac_runtime.start =
                                   {
                                     pos_fname = "queue.mli";
                                     pos_lnum = 23;
                                     pos_bol = 920;
                                     pos_cnum = 932
                                   };
                                 Ortac_runtime.stop =
                                   {
                                     pos_fname = "queue.mli";
                                     pos_lnum = 23;
                                     pos_bol = 920;
                                     pos_cnum = 964
                                   }
                               }))
                  then None
                  else
                    Some
                      (Ortac_runtime.report "Queue" "create ()"
                         (Ortac_runtime.Protected_value
                            (Res
                               (int,
                                 (let t_old__028_ = Model.get state__024_ 0
                                  and t_new__029_ =
                                    lazy
                                      (Model.get (Lazy.force new_state__026_)
                                         0) in
                                  try
                                    Ortac_runtime.Gospelstdlib.Sequence.hd
                                      t_old__028_.contents
                                  with
                                  | e ->
                                      raise
                                        (Ortac_runtime.Partial_function
                                           (e,
                                             {
                                               Ortac_runtime.start =
                                                 {
                                                   pos_fname = "queue.mli";
                                                   pos_lnum = 22;
                                                   pos_bol = 875;
                                                   pos_cnum = 891
                                                 };
                                               Ortac_runtime.stop =
                                                 {
                                                   pos_fname = "queue.mli";
                                                   pos_lnum = 22;
                                                   pos_bol = 875;
                                                   pos_cnum = 919
                                                 }
                                             })))))) "pop"
                         [("old t.contents <> Sequence.empty",
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 23;
                                  pos_bol = 920;
                                  pos_cnum = 932
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 23;
                                  pos_bol = 920;
                                  pos_cnum = 964
                                }
                            })]))
           | Error (Empty) ->
               if
                 let t_old__034_ = Model.get state__024_ 0
                 and t_new__035_ =
                   lazy (Model.get (Lazy.force new_state__026_) 0) in
                 (try
                    let __t1__036_ =
                      (Lazy.force t_new__035_).contents =
                        t_old__034_.contents in
                    let __t2__037_ =
                      t_old__034_.contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty in
                    __t1__036_ && __t2__037_
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "queue.mli";
                                   pos_lnum = 17;
                                   pos_bol = 643;
                                   pos_cnum = 663
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "queue.mli";
                                   pos_lnum = 17;
                                   pos_bol = 643;
                                   pos_cnum = 707
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Queue" "create ()"
                      (Ortac_runtime.Exception "Empty") "pop"
                      [("t.contents = old t.contents = Sequence.empty",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 17;
                               pos_bol = 643;
                               pos_cnum = 663
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 17;
                               pos_bol = 643;
                               pos_cnum = 707
                             }
                         })])
           | _ -> None)
      | (Peek, Res ((Result (Int, Exn), _), v_2)) ->
          (match v_2 with
           | Ok v_2 ->
               if
                 let t_old__041_ = Model.get state__024_ 0
                 and t_new__042_ =
                   lazy (Model.get (Lazy.force new_state__026_) 0) in
                 (try
                    v_2 =
                      (Ortac_runtime.Gospelstdlib.Sequence.hd
                         (Lazy.force t_new__042_).contents)
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "queue.mli";
                                   pos_lnum = 28;
                                   pos_bol = 1163;
                                   pos_cnum = 1175
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "queue.mli";
                                   pos_lnum = 28;
                                   pos_bol = 1163;
                                   pos_cnum = 1201
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Queue" "create ()"
                      (Ortac_runtime.Protected_value
                         (Res
                            (int,
                              (let t_old__039_ = Model.get state__024_ 0
                               and t_new__040_ =
                                 lazy
                                   (Model.get (Lazy.force new_state__026_) 0) in
                               try
                                 Ortac_runtime.Gospelstdlib.Sequence.hd
                                   (Lazy.force t_new__040_).contents
                               with
                               | e ->
                                   raise
                                     (Ortac_runtime.Partial_function
                                        (e,
                                          {
                                            Ortac_runtime.start =
                                              {
                                                pos_fname = "queue.mli";
                                                pos_lnum = 28;
                                                pos_bol = 1163;
                                                pos_cnum = 1179
                                              };
                                            Ortac_runtime.stop =
                                              {
                                                pos_fname = "queue.mli";
                                                pos_lnum = 28;
                                                pos_bol = 1163;
                                                pos_cnum = 1201
                                              }
                                          })))))) "peek"
                      [("v = Sequence.hd t.contents",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 28;
                               pos_bol = 1163;
                               pos_cnum = 1175
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 28;
                               pos_bol = 1163;
                               pos_cnum = 1201
                             }
                         })])
           | Error (Empty) ->
               if
                 let t_old__043_ = Model.get state__024_ 0
                 and t_new__044_ =
                   lazy (Model.get (Lazy.force new_state__026_) 0) in
                 (try
                    let __t1__045_ =
                      (Lazy.force t_new__044_).contents =
                        t_old__043_.contents in
                    let __t2__046_ =
                      t_old__043_.contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty in
                    __t1__045_ && __t2__046_
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "queue.mli";
                                   pos_lnum = 27;
                                   pos_bol = 1098;
                                   pos_cnum = 1118
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "queue.mli";
                                   pos_lnum = 27;
                                   pos_bol = 1098;
                                   pos_cnum = 1162
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Queue" "create ()"
                      (Ortac_runtime.Exception "Empty") "peek"
                      [("t.contents = old t.contents = Sequence.empty",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 27;
                               pos_bol = 1098;
                               pos_cnum = 1118
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 27;
                               pos_bol = 1098;
                               pos_cnum = 1162
                             }
                         })])
           | _ -> None)
      | (Peek_opt, Res ((Option (Int), _), v_3)) ->
          if
            let t_old__048_ = Model.get state__024_ 0
            and t_new__049_ = lazy (Model.get (Lazy.force new_state__026_) 0) in
            (try
               (match v_3 with
                | None ->
                    if
                      (Lazy.force t_new__049_).contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty
                    then true
                    else false
                | Some a_1 ->
                    if
                      a_1 =
                        (Ortac_runtime.Gospelstdlib.Sequence.hd
                           (Lazy.force t_new__049_).contents)
                    then true
                    else false)
                 = true
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "queue.mli";
                              pos_lnum = 32;
                              pos_bol = 1344;
                              pos_cnum = 1356
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "queue.mli";
                              pos_lnum = 34;
                              pos_bol = 1415;
                              pos_cnum = 1461
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Queue" "create ()"
                 (Ortac_runtime.Value (Res (Ortac_runtime.dummy, ())))
                 "peek_opt"
                 [("match v with\n        | None -> t.contents = Sequence.empty\n        | Some a -> a = Sequence.hd t.contents",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 32;
                          pos_bol = 1344;
                          pos_cnum = 1356
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 34;
                          pos_bol = 1415;
                          pos_cnum = 1461
                        }
                    })])
      | (Clear, Res ((Unit, _), _)) -> None
      | (Is_empty, Res ((Bool, _), b)) ->
          if
            let t_old__055_ = Model.get state__024_ 0
            and t_new__056_ = lazy (Model.get (Lazy.force new_state__026_) 0) in
            (try
               b =
                 (match Ortac_runtime.Gospelstdlib.Sequence.length
                          (Lazy.force t_new__056_).contents
                  with
                  | __x__057_ when
                      (=) __x__057_
                        (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                      -> true
                  | _ -> false)
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "queue.mli";
                              pos_lnum = 43;
                              pos_bol = 1799;
                              pos_cnum = 1811
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "queue.mli";
                              pos_lnum = 45;
                              pos_bol = 1873;
                              pos_cnum = 1893
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Queue" "create ()"
                 (Ortac_runtime.Value
                    (Res
                       (bool,
                         (let t_old__052_ = Model.get state__024_ 0
                          and t_new__053_ =
                            lazy (Model.get (Lazy.force new_state__026_) 0) in
                          try
                            match Ortac_runtime.Gospelstdlib.Sequence.length
                                    (Lazy.force t_new__053_).contents
                            with
                            | __x__054_ when
                                (=) __x__054_
                                  (Ortac_runtime.Gospelstdlib.integer_of_int
                                     0)
                                -> true
                            | _ -> false
                          with
                          | e ->
                              raise
                                (Ortac_runtime.Partial_function
                                   (e,
                                     {
                                       Ortac_runtime.start =
                                         {
                                           pos_fname = "queue.mli";
                                           pos_lnum = 43;
                                           pos_bol = 1799;
                                           pos_cnum = 1815
                                         };
                                       Ortac_runtime.stop =
                                         {
                                           pos_fname = "queue.mli";
                                           pos_lnum = 45;
                                           pos_bol = 1873;
                                           pos_cnum = 1893
                                         }
                                     })))))) "is_empty"
                 [("b = match Sequence.length t.contents with\n        | 0 -> true\n        | _ -> false",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 43;
                          pos_bol = 1799;
                          pos_cnum = 1811
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 45;
                          pos_bol = 1873;
                          pos_cnum = 1893
                        }
                    })])
      | (Transfer, Res ((Unit, _), _)) -> None
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Queue STM tests" 2 check_init_state
        ortac_show_cmd ortac_postcond])
